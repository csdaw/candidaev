% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_mds.R
\name{plot_mds}
\alias{plot_mds}
\title{Plot multidimensional scaling}
\usage{
plot_mds(mat, mat_labels, shape_size = 2, ...)
}
\arguments{
\item{mat}{numeric matrix: contains log2 LFQ intensity data to be used
for pairwise distance calculation. Column names should be in the format
c("XXX_Y1", "XXX_Y2", "XXX_Z1", "XXX_Z2, "MMM_Y1", "MMM_Y2") and so on.}

\item{mat_labels}{character vector: length must equal the number of columns
in \code{mat}. Used for grouping LFQ intensity data so different groups
have different point shapes e.g. EV vs WCL.}

\item{shape_size}{integer: size of scatterplot points}
}
\value{
Returns an MDS plot on the current graphics device
(generated by \code{\link[ggplot2]{ggplot}})..
}
\description{
\code{plot_mds} is a wrapper function around
\code{\link[limma]{plotMDS}} from \pkg{limma}.

\code{plotMDS} is used to plot samples on a 2D scatter plot so that
distances between the samples on the plot correspond approximately to the
typical log2FC between the samples (for the top 500 proteins with the
largest standard deviation between the samples).


\code{\link[ggplot2]{ggplot}} is used to draw the plot.
}
\examples{
# load a proteinGroups data.frame supplied with this package
my_proteinGroups <- atcc

# load its corresponding experimental design
my_expDesign <- atcc_exp

# filter for proteins identified with minimum 3 unique peptides
# and convert to numeric matrix
my_lfq <- my_proteinGroups \%>\%
  filter(Unique.peptides >= 3) \%>\%
  convert_lfq(., my_expDesign)

# filter for proteins quantified in min 2/3 reps of
# at least 1 sample group
my_filt <- my_lfq \%>\%
  filter_na4(my_lfq, logic = "or", op = "<=",
             pat1 = "A10231_EV", val1 = 1,
             pat2 = "A10231_W", val2 = 1,
             pat3 = "A90028_EV", val3 = 1,
             pat4 = "A90028_W", val4 = 1)

# normalise LFQ intensities
my_norm <- normalizeCyclicLoess(my_filt)


# vector for sample groups
my_labs <- c(rep("EV", 3),
             rep("WCL", 3),
             rep("EV", 3),
             rep("WCL", 3))

# generate MDS plot of first 2 dimensions
plot_mds(my_norm, my_labs)

}
